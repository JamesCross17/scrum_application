{"version":3,"sources":["containers/forms/AssessmentMethodology.jsx","containers/forms/AddMeeting.jsx","containers/modals/AddMeetingModal.jsx","HeaderMenu.jsx","containers/Meetings/index.jsx","App.js","serviceWorker.js","index.js"],"names":["AssessmentMethodology","meeting","span","Item","name","labelCol","label","wrapperCol","Group","style","marginLeft","value","Agenda","Option","Select","layout","tailLayout","offset","AddMeeting","onClose","meetings","Form","useForm","form","console","log","onFinish","values","gutter","rules","required","placeholder","onChange","resetFields","allowClear","map","index","key","text","teams","locale","format","defaultValue","moment","TextArea","noStyle","shouldUpdate","prevValues","currentValues","getFieldValue","step","marks","0","25","50","75","100","type","htmlType","onClick","AddMeetingModal","useState","visible","setVisible","handleCancel","title","width","footer","onCancel","HeaderMenu","defaultSelectedKeys","theme","mode","disabled","Meetings","columns","dataIndex","filters","onFilter","record","team","indexOf","find","sorter","render","estimation","color","estimationText","toUpperCase","icon","EditOutlined","dataSource","data","onRow","rowIndex","Header","Layout","Content","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","ru","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.08125982.chunk.js","sourcesContent":["import React from 'react'\nimport { Checkbox, Col, Form, Row } from 'antd'\n\nconst AssessmentMethodology = ({ meeting }) => {\n    const Agenda = () => {\n        switch (meeting) {\n            case 'daily':\n                return <Row>\n                    <Col span={8}>\n                        <h3>Методика оценки</h3>\n                        <p>\n                            A: почти все встречи без продакта\n                        </p>\n                        <p>\n                            B: отдельные встречи без продакта\n                        </p>\n                        <p>C: проводится с продактом</p>\n                        <p>D: выходит за пределы 15 мин</p>\n                        <p>E: не проводится или проводится формально</p>\n                    </Col>\n                    <Col span={16}>\n                        <Form.Item name=\"checklist\" labelCol={{ span: 4 }}\n                                   label=\"Адженда\" wrapperCol={{ span: 20 }}>\n                            <Checkbox.Group>\n                                <Checkbox style={{ marginLeft: 8 }} value=\"a\">Команда\n                                    Разработки инспектирует прогресс\n                                    к Цели\n                                    Спринта (формат согласован заранее:\n                                    смотрим\n                                    доску скрам/канбан, берндаун/кумулятив\n                                    флоу)\n                                </Checkbox>\n                                <Checkbox value=\"b\">Команда Разработки отвечает\n                                    на 3\n                                    стандартных\n                                    вопроса\n                                </Checkbox>\n                                <Checkbox value=\"c\">Команда Разработки\n                                    составляет список\n                                    вопросов,\n                                    требующих дальнейших обсуждений после\n                                    скрама и\n                                    намечает митинги на день\n                                </Checkbox>\n                            </Checkbox.Group>\n                        </Form.Item>\n                    </Col>\n                </Row>\n            case 'demo':\n                return <Row>\n                    <Col span={8}>\n                        <h3>Методика оценки</h3>\n                        <p>Сумма выполняемых (+) из адженды:</p>\n                        <p>A: 7+ налажена коммуникация пользователями</p>\n                        <p>B: 6+ налажена коммуникация пользователями</p>\n                        <p>C: 5+ налажена коммуникация пользователями</p>\n                        <p>D: 4 +</p>\n                        <p>E: менее 3+</p>\n                    </Col>\n                    <Col span={16}>\n                        <Form.Item name=\"checklist\" labelCol={{ span: 4 }}\n                                   label=\"Адженда\" wrapperCol={{ span: 20 }}>\n                            <Checkbox.Group>\n                                <Checkbox style={{ marginLeft: 8 }} value=\"a\">+Заинтересованным\n                                    лицам\n                                    заранее высылается\n                                    адженда митинга</Checkbox>\n                                <Checkbox value=\"b\">+Владелец Продукта\n                                    обозначает статус по целям\n                                    спринта</Checkbox>\n                                <Checkbox value=\"c\">+Команды демонстрируют\n                                    инкремент</Checkbox>\n                                <Checkbox value=\"d\">+Заинтересованные лица\n                                    дают обратную связь</Checkbox>\n                                <Checkbox value=\"e\">+Инспекция прогресса по\n                                    роадмэпу</Checkbox>\n                                <Checkbox value=\"f\">+Обсуждают дальнейшие\n                                    шаги</Checkbox>\n                                <Checkbox value=\"g\">+Вносятся корректировки\n                                    в бэклог</Checkbox>\n                                <Checkbox value=\"h\">+Обозначается цель\n                                    ближайшего спринта</Checkbox>\n                            </Checkbox.Group>\n                        </Form.Item>\n                    </Col>\n                </Row>\n            case 'grooming':\n                return <Row>\n                    <Col span={12}>\n                        <h3>Методика оценки</h3>\n                        <p>А: подготовлены Ready элементы бэклога на 2+ спринта,\n                            продакт готов ко встрече (должны успевать\n                            проработать задач на 2 спринта), сформиован роадмэп\n                            до конца (обновляется раз в месяц)\n                        </p>\n                        <p>B: подготовлены Ready элементы бэклога на 1.5\n                            спринта, сформирован роадмэп до конца года\n                            (обновляется раз в месяц)\n                        </p>\n                        <p>С: подготовлены Ready элементы бэклога на 1 спринт,\n                            ближайшие эпики\n                        </p>\n                        <p>D: меньше С\n                        </p>\n                        <p>E: не проводится\n                        </p>\n                    </Col>\n                    <Col span={12}>\n                        <h3>Неформальное обсуждение элементов Бэклога Продукта,\n                            которое включает в себя:\n                        </h3>\n                        <Form.Item name=\"checklist\" labelCol={{ span: 4 }}\n                                   label=\"Адженда\" wrapperCol={{ span: 20 }}>\n                            <Checkbox.Group>\n                                <Checkbox style={{ marginLeft: 8 }} value=\"a\">+\n                                    Прояснение деталей\n                                </Checkbox>\n                                <Checkbox value=\"b\">+ Разбивку на более мелкие\n                                    элементы\n                                </Checkbox>\n                                <Checkbox value=\"c\">+ Оценку и переоценку\n                                    элементов\n                                </Checkbox>\n                                <Checkbox value=\"d\">+ Объединение элементов\n                                </Checkbox>\n                                <Checkbox value=\"e\">+ Изменение порядка\n                                    элементов\n                                </Checkbox>\n                                <Checkbox value=\"f\">+ Роадмэп раз q недель\n                                </Checkbox>\n                            </Checkbox.Group>\n                        </Form.Item>\n                    </Col>\n                </Row>\n            case 'planning':\n                return <Row>\n                    <Col span={6}>\n                        <h3>Методика оценки</h3>\n                        <p>А: меньше 10%</p>\n                        <p>B: 20 -10%</p>\n                        <p>С: 20-30%</p>\n                        <p>D: 30-50%</p>\n                        <p>E: Более 50%</p>\n                    </Col>\n                    <Col span={18}>\n                        <Form.Item name=\"checklist\" labelCol={{ span: 4 }}\n                                   label=\"Адженда\" wrapperCol={{ span: 20 }}>\n                            <Checkbox.Group>\n                                <Checkbox style={{ marginLeft: 8 }} value=\"a\">+\n                                    Владелец Продукта объясняет приоритеты и\n                                    отвечает на вопросы\n                                </Checkbox>\n                                <Checkbox value=\"b\">Команда Разработки\n                                    прогнозирует работу на Спринт\n                                </Checkbox>\n                                <Checkbox value=\"c\">Скрам-команда формулирует\n                                    Цель Спринта\n                                </Checkbox>\n                                <Checkbox value=\"d\">Команда Разработки создает\n                                    Бэклог Спринта\n                                </Checkbox>\n                            </Checkbox.Group>\n                        </Form.Item>\n                    </Col>\n                </Row>\n            case 'retro':\n                return <Row>\n                    <Col span={6}>\n                        <h3>Методика оценки</h3>\n                        <p>А: каждый член команды участвует в решении главной\n                            проблемы в спринте +B\n                        </p>\n                        <p>B: каждый член команды может назвать топ 3 проблемы\n                            команды разработки (основываясь на ретро-бэклоге) +\n                            C\n                        </p>\n                        <p>С: у команды есть актуальный приоритезированный\n                            бэклог того, что нужно сделать по-другому, составлен\n                            детальный план минимум 1 улучшения + D </p>\n                        <p>D: фиксируются факты по ценностям, план улучшений\n                            составляется не каждый спринт</p>\n                        <p>E: Меньше D</p>\n                    </Col>\n                    <Col span={18}>\n                        <Form.Item name=\"checklist\" labelCol={{ span: 4 }}\n                                   label=\"Адженда\" wrapperCol={{ span: 20 }}>\n                            <Checkbox.Group>\n                                <Checkbox style={{ marginLeft: 8 }}\n                                          value=\"a\"> Скрам-команда инспектирует\n                                    Спринт в разрезе людей, инструментов и\n                                    процессов\n                                </Checkbox>\n                                <Checkbox value=\"b\">Скрам-команда находит\n                                    области для улучшения\n                                </Checkbox>\n                                <Checkbox value=\"c\">Скрам-команда создает\n                                    детальный план улучшений (каждый член\n                                    команды берет на себя задачу/ или пытается\n                                    чем-то помочь)\n                                </Checkbox>\n                            </Checkbox.Group>\n                        </Form.Item>\n                    </Col>\n                </Row>\n            default:\n                return null\n        }\n    }\n    return (\n      <div>\n          {Agenda()}\n      </div>\n    )\n}\n\nexport default AssessmentMethodology","import React from 'react'\nimport {\n    Button,\n    Col,\n    DatePicker,\n    Form,\n    InputNumber,\n    Row,\n    Select,\n    Slider,\n} from 'antd'\nimport TextArea from 'antd/es/input/TextArea'\nimport AssessmentMethodology from './AssessmentMethodology'\nimport 'moment/locale/ru'\nimport locale from 'antd/es/date-picker/locale/ru_RU'\nimport moment from 'moment'\n\nconst { Option } = Select\nconst layout = {\n    labelCol: {\n        span: 6,\n    },\n    wrapperCol: {\n        span: 16,\n    },\n}\nconst tailLayout = {\n    wrapperCol: {\n        offset: 8,\n        span: 16,\n    },\n}\n\nconst AddMeeting = ({ onClose,meetings }) => {\n    const [form] = Form.useForm()\n\n    const onFinish = values => {\n        console.log(values)\n        onClose()\n    }\n\n    const onReset = () => {\n        form.resetFields()\n    }\n    const onMeetingChange = () => {\n        form.resetFields(['checklist'])\n    }\n    console.log('---',meetings);\n    return (\n\n      <Form {...layout} form={form} name=\"control-hooks\"\n            onFinish={onFinish}>\n          <Row gutter={[16, 16]}>\n              <Col span={9}>\n                  <Form.Item\n                    name=\"meeting\"\n                    label=\"Митинг\"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                  >\n                      <Select\n                        placeholder=\"Выберите митинг\"\n                        onChange={onMeetingChange}\n                        allowClear\n                      >\n                          {meetings.meetings.map(({key,text},index)=><Option value={key} key={index}>{text}</Option>)}\n                      </Select>\n                  </Form.Item>\n                  <Form.Item\n                    name=\"team\"\n                    label=\"Команда\"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                  >\n                      <Select\n                        placeholder=\"Выберите команду\"\n                        allowClear\n                      >\n                          {meetings.teams.map(({key,text},index)=><Option value={key} key={index}>{text}</Option>)}\n                      </Select>\n                  </Form.Item>\n                  <Form.Item\n                    name=\"sprint\"\n                    label=\"Спринт\"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                  >\n                      <InputNumber/>\n                  </Form.Item>\n                  <Form.Item\n                    name=\"date\"\n                    label=\"Дата\"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                  >\n                      <DatePicker locale={locale} format={'DD.MM.YYYY'} defaultValue={moment()}/>\n                  </Form.Item>\n                  <Form.Item\n                    name=\"comment\"\n                    label=\"Комментарий\"\n                  >\n                      <TextArea/>\n                  </Form.Item>\n              </Col>\n              <Col span={15}>\n                  <Form.Item\n                    noStyle\n                    shouldUpdate={(\n                      prevValues, currentValues) => prevValues.meeting !==\n                      currentValues.meeting}\n                  >\n                      {({ getFieldValue }) => <AssessmentMethodology\n                        meeting={getFieldValue('meeting')}\n                      />\n                      }\n                  </Form.Item>\n              </Col>\n          </Row>\n          <Row gutter={[16, 16]}>\n              <Col span={9}>\n                  <Form.Item\n                    name=\"estimation\"\n                    label=\"Оценка\"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                  >\n                      <Slider\n                        step={25}\n                        marks={{\n                            0: 'E',\n                            25: 'D',\n                            50: 'C',\n                            75: 'B',\n                            100: 'A',\n                        }}\n                      />\n                  </Form.Item>\n              </Col>\n              <Col span={12}>\n                  <Form.Item {...tailLayout}>\n                      <Row>\n                          <Col span={12}>\n                              <Button type=\"primary\" htmlType=\"submit\">\n                                  Отправить\n                              </Button>\n                          </Col>\n                          <Col span={12}>\n                              <Button htmlType=\"button\" onClick={onReset}>\n                                  Сбросить\n                              </Button>\n                          </Col>\n                      </Row>\n                  </Form.Item>\n              </Col>\n          </Row>\n      </Form>\n    )\n}\n\nexport default AddMeeting","import React, { useState } from 'react'\nimport { Button, Modal } from 'antd'\nimport AddMeeting from '../forms/AddMeeting'\nimport meetings from \"../../mock/meetings.json\"\nconst AddMeetingModal = () => {\n    const [visible, setVisible] = useState(false)\n    const showModal = () => setVisible(true)\n    const handleCancel = () => {\n        setVisible(false)\n    }\n    return (\n      <>\n          <Button type=\"primary\" onClick={showModal}>\n              Добавить митинг\n          </Button>\n          <Modal\n            title=\"Добавить митинг\"\n            visible={visible}\n            width={1200}\n            footer={null}\n            onCancel={handleCancel}\n          >\n              <AddMeeting onClose={handleCancel} meetings={meetings}/>\n          </Modal>\n      </>\n    )\n}\n\nexport default AddMeetingModal","import React from 'react'\nimport { Menu } from 'antd'\n// import {\n//     BrowserRouter as Router,\n//     Switch,\n//     Route,\n//     Link\n// } from \"react-router-dom\";\nconst HeaderMenu = () => {\n    // const [current, setCurrent] = useState('scrum')\n    // const handleClick = e => {\n    //     console.log('click ', e)\n    //     setCurrent(e.key)\n    // }\n    return (\n      <Menu\n        // onClick={handleClick}\n        //  selectedKeys={[current]}\n        defaultSelectedKeys={['scrum']}\n        theme={'dark'}\n        mode=\"horizontal\n\n            \">\n          <Menu.Item key=\"scrum\">Скрам-рамка</Menu.Item>\n          <Menu.Item disabled key=\"termometrs\">Командные\n              термометры</Menu.Item>\n      </Menu>\n    )\n}\n\nexport default HeaderMenu","import React from 'react'\nimport { Button, Layout, Table, Tag } from 'antd'\nimport { data, meetings, teams } from '../../mock/meetings.json'\nimport { EditOutlined } from '@ant-design/icons'\n\nconst Meetings = () => {\n    const filterTeams = teams.map(({ key, text }) => ({ text, value: key }))\n    const filterMeetings = meetings.map(\n      ({ key, text }) => ({ text, value: key }))\n    const columns = [\n        {\n            title: 'Команда',\n            dataIndex: 'team',\n            key: 'team',\n            filters: filterTeams,\n            onFilter: (value, record) => record.team.indexOf(value) === 0,\n        },\n        {\n            title: 'Митинг',\n            dataIndex: 'meeting',\n            key: 'meeting',\n            filters: filterMeetings,\n            onFilter: (value, record) => {\n                const isFinded = meetings.find(\n                  ({ text }) => text === record.meeting)\n                return isFinded.key === value\n            },\n        },\n        {\n            title: 'Спринт',\n            dataIndex: 'sprint',\n            key: 'sprint',\n        },\n        {\n            title: 'Дата',\n            dataIndex: 'date',\n            key: 'date',\n            sorter: true,\n        },\n        {\n            title: 'Комментарий',\n            dataIndex: 'comment',\n            key: 'comment',\n        },\n        {\n            title: 'Оценка',\n            dataIndex: 'estimation',\n            key: 'estimation',\n            render: estimation => {\n                let color = 'black'\n                let estimationText = ''\n                if (estimation === '0') {\n                    color = 'red'\n                    estimationText = 'E'\n                } else if (estimation === '25') {\n                    color = 'volcano'\n                    estimationText = 'D'\n                } else if (estimation === '50') {\n                    color = 'orange'\n                    estimationText = 'C'\n                } else if (estimation === '75') {\n                    color = 'lime'\n                    estimationText = 'B'\n                } else if (estimation === '100') {\n                    color = 'green'\n                    estimationText = 'A'\n                }\n                return (\n                  <Tag color={color} key={estimation}>\n                      {estimationText.toUpperCase()}\n                  </Tag>\n                )\n            },\n        },\n        {\n            title: '',\n            dataIndex: 'action',\n            key: 'action',\n            render: () => (<Button type=\"primary\" icon={<EditOutlined/>}>\n                Редактировать\n            </Button>),\n        },\n    ]\n    return (\n      <Layout>\n          <Table\n            dataSource={data}\n            columns={columns}\n            onRow={(record, rowIndex) => {\n                return {\n                    onClick: () => {console.log('onRow', record)}, //\n                }\n            }\n            }\n          />\n      </Layout>\n    )\n}\n\nexport default Meetings","import React from 'react'\nimport './App.css'\nimport { Layout } from 'antd'\nimport AddMeetingModal from './containers/modals/AddMeetingModal'\nimport HeaderMenu from './HeaderMenu'\nimport Meetings from './containers/Meetings'\n\nconst { Header, Content } = Layout\n\nfunction App () {\n    return (\n      <Layout>\n          <Header>\n              <HeaderMenu/>\n          </Header>\n          <Content>\n              <AddMeetingModal/>\n              <Meetings/>\n          </Content>\n      </Layout>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\nimport ru from 'antd/es/locale/ru_RU';\nimport { ConfigProvider } from 'antd'\nReactDOM.render(\n  <React.StrictMode>\n      <ConfigProvider locale={ru}>\n      <App />\n      </ConfigProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}